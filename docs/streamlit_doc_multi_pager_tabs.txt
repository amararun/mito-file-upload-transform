## st.Page
Streamlit Version
Version 1.42.0
Configure a page for st.navigation in a multipage app.

Call st.Page to initialize a StreamlitPage object, and pass it to st.navigation to declare a page in your app.

When a user navigates to a page, st.navigation returns the selected StreamlitPage object. Call .run() on the returned StreamlitPage object to execute the page. You can only run the page returned by st.navigation, and you can only run it once per app rerun.

A page can be defined by a Python file or Callable. Python files used as a StreamlitPage source will have __name__ == "__page__". Functions used as a StreamlitPage source will have __name__ corresponding to the module they were imported from. Only the entrypoint file and functions defined within the entrypoint file have __name__ == "__main__" to adhere to Python convention.

Function signature[source]
st.Page(page, *, title=None, icon=None, url_path=None, default=False)

Parameters
page (str, Path, or callable)

The page source as a Callable or path to a Python file. If the page source is defined by a Python file, the path can be a string or pathlib.Path object. Paths can be absolute or relative to the entrypoint file. If the page source is defined by a Callable, the Callable can't accept arguments.

title (str or None)

The title of the page. If this is None (default), the page title (in the browser tab) and label (in the navigation menu) will be inferred from the filename or callable name in page. For more information, see Overview of multipage apps.

icon (str or None)

An optional emoji or icon to display next to the page title and label. If icon is None (default), no icon is displayed next to the page label in the navigation menu, and a Streamlit icon is displayed next to the title (in the browser tab). If icon is a string, the following options are valid:

A single-character emoji. For example, you can set icon="🚨"
or icon="🔥". Emoji short codes are not supported.

An icon from the Material Symbols library (rounded style) in the
format ":material/icon_name:" where "icon_name" is the name of the icon in snake case.

For example, icon=":material/thumb_up:" will display the Thumb Up icon. Find additional icons in the Material Symbols font library.

url_path (str or None)

The page's URL pathname, which is the path relative to the app's root URL. If this is None (default), the URL pathname will be inferred from the filename or callable name in page. For more information, see Overview of multipage apps.

The default page will have a pathname of "", indicating the root URL of the app. If you set default=True, url_path is ignored. url_path can't include forward slashes; paths can't include subdirectories.

default (bool)

Whether this page is the default page to be shown when the app is loaded. If default is False (default), the page will have a nonempty URL pathname. However, if no default page is passed to st.navigation and this is the first page, this page will become the default page. If default is True, then the page will have an empty pathname and url_path will be ignored.

Returns
(StreamlitPage)

The page object associated to the given script.

Example
import streamlit as st

def page2():
    st.title("Second page")

pg = st.navigation([
    st.Page("page1.py", title="First page", icon="🔥"),
    st.Page(page2, title="Second page", icon=":material/favorite:"),
])
pg.run()
Copy
StreamlitPage
Streamlit Version
Version 1.42.0
A page within a multipage Streamlit app.

Use st.Page to initialize a StreamlitPage object.

Class description[source]
StreamlitPage(page, *, title=None, icon=None, url_path=None, default=False)

Methods
run()

Execute the page.

Attributes
icon (str)

The icon of the page.

If no icon was declared in st.Page, this property returns "".

title (str)

The title of the page.

Unless declared otherwise in st.Page, the page title is inferred from the filename or callable name. For more information, see Overview of multipage apps.

url_path (str)

The page's URL pathname, which is the path relative to the app's root URL.

Unless declared otherwise in st.Page, the URL pathname is inferred from the filename or callable name. For more information, see Overview of multipage apps.

The default page will always have a url_path of "" to indicate the root URL (e.g. homepage).

StreamlitPage.run
Streamlit Version
Version 1.42.0
Execute the page.

When a page is returned by st.navigation, use the .run() method within your entrypoint file to render the page. You can only call this method on the page returned by st.navigation. You can only call this method once per run of your entrypoint file.

Function signature[source]
StreamlitPage.run()

Previous:
st.navigation
Next:
st.page_link
forum
Still have questions?
Our forums are full of helpful information and Streamlit experts.

Home
Contact Us
Community
© 2025 Snowflake Inc.Cookie policy



## st.navigation
Streamlit Version
Version 1.42.0
Configure the available pages in a multipage app.

Call st.navigation in your entrypoint file with one or more pages defined by st.Page. st.navigation returns the current page, which can be executed using .run() method.

When using st.navigation, your entrypoint file (the file passed to streamlit run) acts like a router or frame of common elements around each of your pages. Streamlit executes the entrypoint file with every app rerun. To execute the current page, you must call the .run() method on the StreamlitPage object returned by st.navigation.

The set of available pages can be updated with each rerun for dynamic navigation. By default, st.navigation draws the available pages in the side navigation if there is more than one page. This behavior can be changed using the position keyword argument.

As soon as any session of your app executes the st.navigation command, your app will ignore the pages/ directory (across all sessions).

Function signature[source]
st.navigation(pages, *, position="sidebar", expanded=False)

Parameters
pages (list[StreamlitPage] or dict[str, list[StreamlitPage]])

The available pages for the app.

To create labeled sections or page groupings within the navigation menu, pages must be a dictionary. Each key is the label of a section and each value is the list of StreamlitPage objects for that section.

To create a navigation menu with no sections or page groupings, pages must be a list of StreamlitPage objects.

Use st.Page to create StreamlitPage objects.

position ("sidebar" or "hidden")

The position of the navigation menu. If position is "sidebar" (default), the navigation widget appears at the top of the sidebar. If position is "hidden", the navigation widget is not displayed.

If there is only one page in pages, the navigation will be hidden for any value of position.

expanded (bool)

Whether the navigation menu should be expanded. If this is False (default), the navigation menu will be collapsed and will include a button to view more options when there are too many pages to display. If this is True, the navigation menu will always be expanded; no button to collapse the menu will be displayed.

If st.navigation changes from expanded=True to expanded=False on a rerun, the menu will stay expanded and a collapse button will be displayed.

Returns
(StreamlitPage)

The current page selected by the user.

Examples
The following examples show possible entrypoint files, which is the file you pass to streamlit run. Your entrypoint file manages your app's navigation and serves as a router between pages.

Example 1: Use a callable or Python file as a page

You can declare pages from callables or file paths.

page_1.py (in the same directory as your entrypoint file):

import streamlit as st

st.title("Page 1")
Copy
Your entrypoint file:

import streamlit as st

def page_2():
    st.title("Page 2")

pg = st.navigation([st.Page("page_1.py"), st.Page(page_2)])
pg.run()
Copy

Built with Streamlit 🎈
Fullscreen
open_in_new
Example 2: Group pages into sections

You can use a dictionary to create sections within your navigation menu. In the following example, each page is similar to Page 1 in Example 1, and all pages are in the same directory. However, you can use Python files from anywhere in your repository. For more information, see st.Page.

Directory structure:

your_repository/
├── create_account.py
├── learn.py
├── manage_account.py
├── streamlit_app.py
└── trial.py
Copy
streamlit_app.py:

import streamlit as st

pages = {
    "Your account": [
        st.Page("create_account.py", title="Create your account"),
        st.Page("manage_account.py", title="Manage your account"),
    ],
    "Resources": [
        st.Page("learn.py", title="Learn about us"),
        st.Page("trial.py", title="Try it out"),
    ],
}

pg = st.navigation(pages)
pg.run()
Copy

Built with Streamlit 🎈
Fullscreen
open_in_new
Example 3: Stateful widgets across multiple pages

Call widget functions in your entrypoint file when you want a widget to be stateful across pages. Assign keys to your common widgets and access their values through Session State within your pages.

import streamlit as st

def page1():
    st.write(st.session_state.foo)

def page2():
    st.write(st.session_state.bar)

# Widgets shared by all the pages
st.sidebar.selectbox("Foo", ["A", "B", "C"], key="foo")
st.sidebar.checkbox("Bar", key="bar")

pg = st.navigation([st.Page(page1), st.Page(page2)])
pg.run()




## st.page_link
Streamlit Version
Version 1.42.0
Display a link to another page in a multipage app or to an external page.

If another page in a multipage app is specified, clicking st.page_link stops the current page execution and runs the specified page as if the user clicked on it in the sidebar navigation.

If an external page is specified, clicking st.page_link opens a new tab to the specified page. The current script run will continue if not complete.

Function signature[source]
st.page_link(page, *, label=None, icon=None, help=None, disabled=False, use_container_width=None)

Parameters
page (str, Path, or st.Page)

The file path (relative to the main script) or an st.Page indicating the page to switch to. Alternatively, this can be the URL to an external page (must start with "http://" or "https://").

label (str)

The label for the page link. Labels are required for external pages. The label can optionally contain GitHub-flavored Markdown of the following types: Bold, Italics, Strikethroughs, Inline Code, Links, and Images. Images display like icons, with a max height equal to the font height.

Unsupported Markdown elements are unwrapped so only their children (text contents) render. Display unsupported elements as literal characters by backslash-escaping them. E.g., "1\. Not an ordered list".

See the body parameter of st.markdown for additional, supported Markdown directives.

icon (str or None)

An optional emoji or icon to display next to the button label. If icon is None (default), no icon is displayed. If icon is a string, the following options are valid:

A single-character emoji. For example, you can set icon="🚨" or icon="🔥". Emoji short codes are not supported.

An icon from the Material Symbols library (rounded style) in the format ":material/icon_name:" where "icon_name" is the name of the icon in snake case.

For example, icon=":material/thumb_up:" will display the Thumb Up icon. Find additional icons in the Material Symbols font library.

help (str or None)

A tooltip that gets displayed when the link is hovered over. If this is None (default), no tooltip is displayed.

The tooltip can optionally contain GitHub-flavored Markdown, including the Markdown directives described in the body parameter of st.markdown.

disabled (bool)

An optional boolean that disables the page link if set to True. The default is False.

use_container_width (bool)

Whether to expand the link's width to fill its parent container. The default is True for page links in the sidebar and False for those in the main app.

Example
Consider the following example given this file structure:

your-repository/
├── pages/
│   ├── page_1.py
│   └── page_2.py
└── your_app.py
Copy
import streamlit as st

st.page_link("your_app.py", label="Home", icon="🏠")
st.page_link("pages/page_1.py", label="Page 1", icon="1️⃣")
st.page_link("pages/page_2.py", label="Page 2", icon="2️⃣", disabled=True)
st.page_link("http://www.google.com", label="Google", icon="🌎")
Copy
The default navigation is shown here for comparison, but you can hide the default navigation using the client.showSidebarNavigation configuration option. This allows you to create custom, dynamic navigation menus for your apps!


## st.switch_page
Streamlit Version
Version 1.42.0
Programmatically switch the current page in a multipage app.

When st.switch_page is called, the current page execution stops and the specified page runs as if the user clicked on it in the sidebar navigation. The specified page must be recognized by Streamlit's multipage architecture (your main Python file or a Python file in a pages/ folder). Arbitrary Python scripts cannot be passed to st.switch_page.

Function signature[source]
st.switch_page(page)

Parameters
page (str, Path, or st.Page)

The file path (relative to the main script) or an st.Page indicating the page to switch to.

Example
Consider the following example given this file structure:

your-repository/
├── pages/
│   ├── page_1.py
│   └── page_2.py
└── your_app.py
Copy
import streamlit as st

if st.button("Home"):
    st.switch_page("your_app.py")
if st.button("Page 1"):
    st.switch_page("pages/page_1.py")
if st.button("Page 2"):
    st.switch_page("pages/page_2.py")
Copy


## st.tabs
Streamlit Version
Version 1.42.0
Insert containers separated into tabs.

Inserts a number of multi-element containers as tabs. Tabs are a navigational element that allows users to easily move between groups of related content.

To add elements to the returned containers, you can use the with notation (preferred) or just call methods directly on the returned object. See examples below.

Warning

All the content of every tab is always sent to and rendered on the frontend. Conditional rendering is currently not supported.

Function signature[source]
st.tabs(tabs)

Parameters
tabs (list of str)

Creates a tab for each string in the list. The first tab is selected by default. The string is used as the name of the tab and can optionally contain GitHub-flavored Markdown of the following types: Bold, Italics, Strikethroughs, Inline Code, Links, and Images. Images display like icons, with a max height equal to the font height.

Unsupported Markdown elements are unwrapped so only their children (text contents) render. Display unsupported elements as literal characters by backslash-escaping them. E.g., "1\. Not an ordered list".

See the body parameter of st.markdown for additional, supported Markdown directives.

Returns
(list of containers)

A list of container objects.

Examples
You can use the with notation to insert any element into a tab:

import streamlit as st

tab1, tab2, tab3 = st.tabs(["Cat", "Dog", "Owl"])

with tab1:
    st.header("A cat")
    st.image("https://static.streamlit.io/examples/cat.jpg", width=200)
with tab2:
    st.header("A dog")
    st.image("https://static.streamlit.io/examples/dog.jpg", width=200)
with tab3:
    st.header("An owl")
    st.image("https://static.streamlit.io/examples/owl.jpg", width=200)
Copy

Built with Streamlit 🎈
Fullscreen
open_in_new
Or you can just call methods directly on the returned objects:

import streamlit as st
import numpy as np

tab1, tab2 = st.tabs(["📈 Chart", "🗃 Data"])
data = np.random.randn(10, 1)

tab1.subheader("A tab with a chart")
tab1.line_chart(data)

tab2.subheader("A tab with the data")
tab2.write(data)